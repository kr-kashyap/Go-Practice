-> Capacity of slice while appending

While appending the capacity of new map is calculated by incrementing the value of the current cap by 1 and it is doubled.

For eg. cap=12
Check if (12+1)*2 works or not. If not (13+1)*2.


-> "->"" and "." operator in Go
	
	In Go, both "->"" and "." are represented by "."

	The compiler knows the types, and can dereference if necessary.

-> For LinkedList 
	
	Check for nil.

-> Literals

	arr1 := []int{}
	
	//Error
	//arr := []struct{}
	arr := []struct{}{}

	type Vertex struct {
		Lat, Long float64
	}
	arr := []Vertex{}	

-> Scope of variables in If else blocks
	
	Variables declared inside if, or declared in the short statement has its scope till the if-else block.

-> Anonymous function

	func(){
    	fmt.Println("Welcome! to GeeksforGeeks")
  	}()

-> Closure

	package main

	import "fmt"

	func adder() func(int) int {
		sum := 0
		return func(x int) int {
			sum += x
			return sum
		}
	}

	func main() {
		pos, neg := adder(), adder()
		for i := 0; i < 10; i++ {
			fmt.Println(
				pos(i),
				neg(-2*i),
			)
		}
	}

	/*
		Here closure is used to protect sum. If closure is not there, it would be a global variable and anyone can modify it.
	*/